package week_4th;
import java.util.Scanner;


/* [주석 1 : 과제 설명]

객체지향프로그래밍 평가과제 (배점 15점)
학과 : 중국외교통상전공
학번 : 201501076
이름 : 노재경

과제 주제 : 쓰레드 비동기화를 통한 경마 프로그램 제작, 1~4번 말 중 선택해 금액을 배팅하고 가장 먼저 도착하는 말을 맞출 시 배팅 금액의 3배를 받음

*/
abstract class BatMoney{ //[주석 7 : 추상클래스]
	double money;
	public abstract int bat(int money);
	public abstract double bat(double money); //[주석 5 : 오버로딩]
}

class ReturnMoney extends BatMoney{ //[주석 2 : 클래스 상속] 받을 금액 계산

	
	public int bat(int money){
		return (int)money * 3;
	}
	public double bat(double money) { // [주석 5 : 오버로딩]
		return money * 3;
	}
	
}



class Horse1 extends Thread{ // [주석 10 : 다중 스레드(Thread 클래스)]
	int i=0;
	int Horse_1;
	public Horse1(int name_1) {
		Horse_1 = name_1;
	}
	public void run() { // [주석 6 : 오버라이딩]
		double a = Math.random();
		int b = (int)(a*10);
		while(i<b) {
			i++;
			System.out.printf(Horse_1 + "번 말이 %d바퀴 달립니다!\n", i);
			
			try {
				Thread.sleep(500);
			}
			catch(InterruptedException e) { //[주석 8 : 예외처리]
				return;
			}
			if(i==b) {
				System.out.printf(Horse_1 + "번 말이 멈춥니다!\n");
			}
		}
   }
}
class Horse2 implements Runnable{ //[주석 11 : 다중 스레드(Runnable 인터페이스)]
	int i=0;
	int Horse_2;
	public Horse2(int name_2) {
		Horse_2 = name_2;
	}
	public void run() { // [주석 6 : 오버라이딩]
		double a = Math.random();
		int b = (int)(a*10);
		while(i<b) {
			i++;
			System.out.printf(Horse_2 + "번 말이 %d바퀴 달립니다!\n", i);
			
			try {
				Thread.sleep(500);
			}
			catch(InterruptedException e) { //[주석 8 : 예외처리]
				return;
			}
			if(i==b) {
				System.out.printf(Horse_2 + "번 말이 멈춥니다!\n");
			}
		}
   }
}
class Horse3 implements Runnable{ //[주석 11 : 다중 스레드(Runnable 인터페이스)]
	int i=0;
	int Horse_3;
	public Horse3(int name_3) {
		Horse_3 = name_3;
	}
	public void run() { // [주석 6 : 오버라이딩]
		double a = Math.random();
		int b = (int)(a*10);
		while(i<b) {
			i++;
			System.out.printf(Horse_3 + "번 말이 %d바퀴 달립니다!\n", i);
			
			try {
				Thread.sleep(500);
			}
			catch(InterruptedException e) { //[주석 8 : 예외처리]
				return;
			}
			if(i==b) {
				System.out.printf(Horse_3 + "번 말이 멈춥니다!\n");
			}
		}
   }
}
class Horse4 implements Runnable{ //[주석 11 : 다중 스레드(Runnable 인터페이스)]
	int i=0;
	int Horse_4;
	public Horse4(int name_4) {
		Horse_4 = name_4;
	}
	public void run() { // [주석 6 : 오버라이딩]
		double a = Math.random();
		int b = (int)(a*10);
		while(i<b) {
			i++;
			System.out.printf(Horse_4 + "번 말이 %d바퀴 달립니다!\n", i);
			
			try {
				Thread.sleep(500);
			}
			catch(InterruptedException e) { //[주석 8 : 예외처리]
				return;
			}
			if(i==b) {
				System.out.printf(Horse_4 + "번 말이 멈춥니다!\n");
			}
		}
   }
}
public class Main {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		Horse1 h1 = new Horse1(1);
		Thread h2 = new Thread(new Horse2(2));
		Thread h3 = new Thread(new Horse3(3));
		Thread h4 = new Thread(new Horse4(4));
		System.out.println("배팅할 말의 번호를 고르세요(1~4번) : ");
		int number = sc.nextInt();
		Runnable selected_horse;
		switch (number) {
		case 1:
			System.out.printf("%d번 말을 고르셨습니다\n", number);
			selected_horse = Horse
			break;
		case 2:
			System.out.printf("%d번 말을 고르셨습니다\n", number);
			break;
		case 3:
			System.out.printf("%d번 말을 고르셨습니다\n", number);
			break;
		case 4:
			System.out.printf("%d번 말을 고르셨습니다\n", number);	
			break;
		default:
			System.out.println("잘못된 번호입니다.");
			number = 0;
		}
		if(number !=0) {
		System.out.println("배팅할 금액을 만원 단위로 적으세요 천원단위까지 가능합니다(예-2만5천원이면 2.5 입력) : ");
		double bill = sc.nextDouble();
		if(bill-(int)bill==0.0) { // 정수형태로 입력 받으면 bill을 정수로 형변환
			bill = (int)bill;
		}
		System.out.printf("배팅한 금액은 %.1f만원 입니다", bill);
		ReturnMoney rm = new ReturnMoney(); // [주석 3 : 생성자]

		System.out.println(" 맞출시 받을 금액은" + rm.bat(bill) + "만원 입니다.");
		System.out.println("잠시 후 경주가 시작됩니다!");
		h1.start();
		h2.start();
		h3.start();
		h4.start();
		}
		
		
		}

		
}


//timer 스레드 동기화 해서 3,2,1 먼저 출력 완료 된 다음 달리기 시작하게 만들어야 함

	
